train$Rating
ratings
ratings[ratings$Rating == NA]
ratings[ratings$Rating == 5,]
ratings[ratings$Rating == 1,]
ratings[ratings$Rating == 2,]
ratings[ratings$Rating == 3,]
ratings[ratings$Rating == 4,]
ratings[ratings$Rating == 5,]
ratings[ratings$Rating == 0,]
ratings[ratings$Rating == NA,]
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
new.Rmat = sparseMatrix(as.integer(tmp2$i), as.integer(tmp2$j), x = tmp2$x)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
set.seed(101)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
user_rating_list = rep(NA, 3686)
i1 = paste0('u', train$UserID + 6041)
j2 = paste0('m', train$MovieID)
x2 = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
tmp2 = tmp[nrow(tmp) + 1,] = user_rating_list
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
new.Rmat = sparseMatrix(as.integer(tmp2$i), as.integer(tmp2$j), x = tmp2$x)
tmp$i
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
tmp = data.frame(i, j, x, stringsAsFactors = T)
# tmp2 = tmp[nrow(tmp) + 1,] = user_rating_list
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
new.Rmat = sparseMatrix(as.integer(tmp2$i), as.integer(tmp2$j), x = tmp2$x)
Rmat
Rmat
Rmat[6040,]
Rmat[6040,]
user_rating_list = rep(0, 3686)
user_rating_list[1] = 2
user_rating_list[2] = 4
Rmat
# tmp2 = tmp[nrow(tmp) + 1,] = user_rating_list
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
Rmat
Rmat[6040,]
Rmat[6041,] = user_rating_list
new.Rmat = rbind(Rmat, user_rating_list)
new.Rmat
new.Rmat[1,]
new.Rmat[6040,]
new.Rmat[6041,]
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
# predict ratings for the first three users
recom = predict(rec_UBCF,
new.Rmat[6041], type = 'ratings')
recom
as(recom, 'matrix')[1:3, 1:100]
as(recom, 'matrix')[1:3,]
as(recom, 'matrix')[1,]
test_recom = as(recom, 'matrix')[1, 1:100]
ordered = order(-test_recom, na.last=NA)[1:10]
recommended_movie_ids = names(test_recom[ordered])
stripped = gsub('m', '', recommended_movie_ids)
final_ids = noquote(stripped)
final_ids
runApp()
runApp()
# tmp2 = tmp[nrow(tmp) + 1,] = user_rating_list
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
new.Rmat = rbind(Rmat, user_rating_list)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
new.Rmat = new('realRatingMatrix', data = new.Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
# predict ratings for the first three users
recom = predict(rec_UBCF,
new.Rmat[6041], type = 'ratings')
test_recom = as(recom, 'matrix')[6041, 1:100]
recom
runApp()
final_ids
user_recom
recom
ordered
final_ids
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
runApp()
library(rsconnect)
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
# ================ Data Loading =====================
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
# ================= System 1 ========================
# ================= System 2 ========================
# Train/Test Split
set.seed(1534)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
# Data Cleaning
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
# Build Sparse Matrix and realRatingMatrix
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
# Build model using Recommender
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
# Predict recommendations
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')
test.pred = test
test.pred$rating = NA
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
# Calculate RMSE
sqrt(mean((test$rating - test.pred$rating)^2))
nrow(test)
recom
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[userid][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[userid][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
or (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[userid][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[userid][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
test.pred = test
test.pred$rating = NA
# For all lines in test file, one by one
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[userid][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
rec_list
rec_list[[1]][1]
for (u in 1:1){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
u
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
userid
movieid
test$user[u]
test$user[1]
test
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
test$UserID[u]
test$MovieID[u]
rec_list[[1]][661]
test.pred$rating
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
rating1 = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating1), 2.5, rating1)
}
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$UserID[u])
movieid = as.character(test$MovieID[u])
userid
movieid
rating1 = rec_list[[userid]][movieid]
rrating
rating1
rating1 = rec_list[[userid]][movieid]
rating1
rec_list[[1]][661]
rec_list[["1"]]["661"]
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = test$UserID[u]
movieid = test$MovieID[u]
rating1 = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating1), 2.5, rating1)
}
# Calculate RMSE
sqrt(mean((test$rating - test.pred$rating)^2))
test$Rating
# Calculate RMSE
sqrt(mean((test$Rating - test.pred$rating)^2))
sqrt(mean((test$rating - test.pred$rating)^2))
# Calculate RMSE
sqrt(mean((test$Rating - test.pred$rating)^2))
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
# ================= System 1 ========================
# ================= System 2 ========================
# Train/Test Split
set.seed(1534)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
# Data Cleaning
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
# Build Sparse Matrix and realRatingMatrix
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
# Build model using Recommender
rec_UBCF = Recommender(Rmat, method = 'POPULAR',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
# Predict recommendations
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')
test.pred = test
test.pred$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = test$UserID[u]
movieid = test$MovieID[u]
rating1 = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating1), 2.5, rating1)
}
# Calculate RMSE
sqrt(mean((test$Rating - test.pred$rating)^2))
scheme = evaluationScheme(ratings, method="cross", train = .8, k=10)
scheme = evaluationScheme(as.matrix(ratings), method="cross", train = .8, k=10)
scheme = evaluationScheme(Rmat, method="cross", train = .8, k=10)
scheme = evaluationScheme(Rmat, method="cross", train = .8, k=10, given=3, goodRating=3)
calcPredictionAccuracy(predict, getData(scheme, "unknown")
calcPredictionAccuracy(predict, getData(scheme, "unknown"))
algorithms <- list(
+ "random items" = list(name="RANDOM", param=NULL),
+ "popular items" = list(name="POPULAR", param=NULL),
+ "user-based CF" = list(name="UBCF", param=list(nn=50)),
+ "item-based CF" = list(name="IBCF", param=list(k=50)),
+ "SVD approximation" = list(name="SVD", param=list(k = 50))
+ )
algorithms <- list(
"random items" = list(name="RANDOM", param=NULL),
"popular items" = list(name="POPULAR", param=NULL),
"user-based CF" = list(name="UBCF", param=list(nn=25)),
"item-based CF" = list(name="IBCF", param=list(k=25)),
"SVD approximation" = list(name="SVD", param=list(k = 25)))
calcPredictionAccuracy(recom, getData(scheme, "unknown"))
recom
recom
calcPredictionAccuracy(recom, getData(scheme, "unknown"))
calcPredictionAccuracy(recom, getData(scheme, "unknown"))
error <- rbind(
UBCF = calcPredictionAccuracy(recom, getData(scheme, "unknown"))
# IBCF = calcPredictionAccuracy(p2, getData(e, "unknown"))
)
calcPredictionAccuracy(rec_list, getData(scheme, "unknown"))
scheme = evaluationScheme(Rmat, method="cross", train = .8, k=10, given=3, goodRating=3)
r1 <- Recommender(getData(scheme, "train"), "UBCF")
calcPredictionAccuracy(r1, getData(scheme, "unknown"))
p1 <- predict(r1, getData(e, "known"), type="ratings")
p1 <- predict(r1, getData(scheme, "known"), type="ratings")
calcPredictionAccuracy(p1, getData(scheme, "unknown"))
r2 <- Recommender(getData(scheme, "train"), "ICBF")
r2 <- Recommender(getData(scheme, "train"), "IBCF")
r3 <- Recommender(getData(scheme, "train"), "POPULAR")
p1 <- predict(r1, getData(scheme, "known"), type="ratings")
p2 <- predict(r1, getData(scheme, "known"), type="ratings")
p3 <- predict(r1, getData(scheme, "known"), type="ratings")
error <- rbind(
UBCF = calcPredictionAccuracy(p1, getData(scheme, "unknown")),
IBCF = calcPredictionAccuracy(p2, getData(scheme, "unknown")),
POP = calcPredictionAccuracy(p3, getData(scheme, "unknown"))
)
error
p2 <- predict(r2, getData(scheme, "known"), type="ratings")
p3 <- predict(r3, getData(scheme, "known"), type="ratings")
error <- rbind(
UBCF = calcPredictionAccuracy(p1, getData(scheme, "unknown")),
IBCF = calcPredictionAccuracy(p2, getData(scheme, "unknown")),
POP = calcPredictionAccuracy(p3, getData(scheme, "unknown"))
)
error
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
system1 = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(Genres %like% 'Action') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title','Genres', 'ave_ratings', 'MovieID') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
system1 = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(Genres %like% 'Action') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title','Genres', 'ave_ratings', 'MovieID') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
system1 = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(Genres %like% 'Action') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title','Genres', 'ave_ratings', 'MovieID') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
system1
system1 = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(Genres %like% 'Action') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title','Genres', 'ave_ratings', 'MovieID') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
# Train/Test Split
set.seed(1534)
# Data Cleaning
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
tmp = data.frame(i, j, x, stringsAsFactors = T)
# Build Sparse Matrix and realRatingMatrix
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
scheme = evaluationScheme(Rmat, method="cross", train = .8, k=10, given=10, goodRating=3)
r1 <- Recommender(getData(scheme, "train"), "UBCF")
r2 <- Recommender(getData(scheme, "train"), "IBCF")
r3 <- Recommender(getData(scheme, "train"), "POPULAR")
p1 <- predict(r1, getData(scheme, "known"), type="ratings")
p2 <- predict(r2, getData(scheme, "known"), type="ratings")
p3 <- predict(r3, getData(scheme, "known"), type="ratings")
error <- rbind(
UBCF = calcPredictionAccuracy(p1, getData(scheme, "unknown")),
IBCF = calcPredictionAccuracy(p2, getData(scheme, "unknown")),
POP = calcPredictionAccuracy(p3, getData(scheme, "unknown"))
)
error
p1
p1[1]
p2
p3
